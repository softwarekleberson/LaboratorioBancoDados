-----------------------------------------------------------------------------
				-- Sequence --
-----------------------------------------------------------------------------

--DDL FOR SEQUENCE SEQ_CAS
-------------------------------------------------
CREATE SEQUENCE "APP"."SEQ_CAS" MINVALUE 1 MAXVALUE 9999999999999999999999 INCREMENT BY 1 START WITH
1 NOCACHE NOORDER NOCYCLE NOKEEP NOSCALE GLOBAL;


--DDL FOR SEQUENCE SEQ_COUTRIES --
---------------------------------------------------------
CREATE SEQUENCE "APP"."SEQ_COU" MINVALUE 1 MAXVALUE 999999999999999999999 INCREMENT BY 1 START WITH
1 NOCACHE NOORDER NOCYCLE NOKEEP NOSCALE GLOBAL;


--DDL FOR SEQUENCE SEQ_DIRECTORS--
--------------------------------------------------
CREATE SEQUENCE "APP"."SEQ_DIR" MINVALUE 1 MAXVALUE 99999999999999999999999 INCREMENT BY 1 START WITH
1 NOCACHE NOORDER NOCYCLE NOKEEP NOSCALE GLOBAL;

--DDL FOR SEQUENCE SEQ_LISTED_IN--
--------------------------------------------------
CREATE SEQUENCE "APP"."SEQ_LIN" MINVALUE 1 MAXVALUE 9999999999999999999999 INCREMENT BY 1 START WITH
1 NOCACHE NOORDER NOCYCLE NOKEEP NOSCALE GLOBAL;


--DDL FOR SEQUENCE SEQ_RATING--
-------------------------------------------------
CREATE SEQUENCE "APP"."SEQ_RAT" MINVALUE 1 MAXVALUE 999999999999999999999 INCREMENT BY 1 START WITH
1 NOCACHE NOORDER NOCYCLE NOKEEP NOSCALE GLOBAL;


--DDL FOR SEQUENCE SEQ_SHOWS --
-------------------------------------------------
CREATE SEQUENCE "APP"."SEQ_SHO" MINVALUE 1 MAXVALUE 9999999999999999999999999 INCREMENT BY 1 START WITH
1 NOCACHE NOORDER NOCYCLE NOKEEP NOSCALE GLOBAL;


-- DDL FOR SEQUENCE SEQ_TYPE --
-----------------------------------------------------
CREATE SEQUENCE "APP"."SEQ_TPE" MINVALUE 1 MAXVALUE 9999999999999999999999999 INCREMENT BY 1 START WITH
1 NOCACHE NOORDER NOCYCLE NOKEEP NOSCALE GLOBAL;

COMMIT;



-----------------------------------------------------------------------------------------------
					--Tabelas-- 
-----------------------------------------------------------------------------------------------

CREATE TABLE "APP"."casting" (
    "cas_id"   INTEGER,
    "cas_name" VARCHAR2(600)
);



CREATE TABLE "APP"."countries" (
    "con_id"   INTEGER,
    "con_name" VARCHAR2(600)
);



CREATE TABLE "APP"."directors" (
    "dir_id"   INTEGER,
    "dir_name" VARCHAR2(600)
);



CREATE TABLE "APP"."listed_in" (
    "lin_id"   INTEGER,
    "lin_name" VARCHAR2(600)
);



CREATE TABLE "APP"."rating" (
    "rat_id"             INTEGER,
    "rat_classification" VARCHAR2(60)
);


CREATE TABLE "APP"."shows" (
    "sho_id"           INTEGER,
    "sho_title"        VARCHAR2(600),
    "sho_release_year" INTEGER,
    "sho_date_added"   VARCHAR2(600),
    "sho_duration"     VARCHAR2(600),
    "sho_description"  CLOB,
    "sho_tpe_id"       INTEGER,
    "sho_rat_id"       INTEGER
);


CREATE TABLE "APP"."shows_casting" (
    "sca_cas_id" INTEGER,
    "sca_sho_id" INTEGER
);


CREATE TABLE "APP"."shows_countries" (
    "sco_con_id" INTEGER,
    "sco_sho_id" INTEGER
);


CREATE TABLE "APP"."shows_directors" (
    "sdr_sho_id" INTEGER,
    "sdr_dir_id" INTEGER
);


CREATE TABLE "APP"."shows_listed_in" (
    "sli_lin_id" INTEGER,
    "sli_sho_id" INTEGER
);


CREATE TABLE "APP"."type" (
    "tpe_id"   INTEGER,
    "tpe_type" VARCHAR2(10)
);

-----------------------------------------------------------------------------------------------
					--Trigger Sequence--
-----------------------------------------------------------------------------------------------


------------------------------------------------------------
-- TRIGGER CASTING --
--------------------------------------------------------

CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP"."TG_SEQ_CAS"
BEFORE INSERT ON "casting"
FOR EACH ROW
BEGIN
	:NEW."cas_id" := SEQ_CAS.nextval;
END;

/
ALTER TRIGGER "APP"."TG_SEQ_CAS" ENABLE;

---------------------------------------------
--TRIGGER Coutring--
---------------------------------------------

CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP"."TG_SEQ_CON"
BEFORE INSERT ON "countries"
FOR EACH ROW
BEGIN
	:NEW."con_id"  := SEQ_COU.nextval;
END;

/
ALTER TRIGGER "APP"."TG_SEQ_CON" ENABLE;

---------------------------------------------
-- TRIGGER DIRECTORS --
---------------------------------------------

CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP"."TG_SEQ_DIR"
BEFORE INSERT ON "directors"
FOR EACH ROW
BEGIN
    :NEW."dir_id" := SEQ_DIR.NEXTVAL;
END;

/
ALTER TRIGGER "APP"."TG_SEQ_DIR" ENABLE;

-----------------------------------------
-- TRIGGER listed_in--
-----------------------------------------

CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP"."TG_SEQ_LIN"
BEFORE INSERT ON "listed_in"
FOR EACH ROW
BEGIN
    :NEW."lin_id" := SEQ_LIN.NEXTVAL;
END;

/
ALTER TRIGGER "APP"."TG_SEQ_LIN" ENABLE;
------------------------------------------
-- TRIGGER RATING --
-----------------------------------------

CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP"."TG_SEQ_RAT"
BEFORE INSERT ON "rating"
FOR EACH ROW
BEGIN
    :NEW."rat_id" := SEQ_RAT.NEXTVAL;
END;

/
ALTER TRIGGER "APP"."TG_SEQ_RAT" ENABLE;

--------------------------------------------
-- TRIGGER SHOWS --
--------------------------------------------

CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP"."TG_SEQ_SHO"
BEFORE INSERT ON "shows"
FOR EACH ROW
BEGIN
    :NEW."sho_id" := SEQ_SHO.NEXTVAL;
END;

/
ALTER TRIGGER "APP"."TG_SEQ_SHO" ENABLE;

---------------------------------------------
-- TRIGGER type --
--------------------------------------------

CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP"."TG_SEQ_TPE"
BEFORE INSERT ON "type"
FOR EACH ROW
BEGIN
    :NEW."tpe_id" := SEQ_TPE.NEXTVAL;
END;

/
ALTER TRIGGER "APP"."TG_SEQ_TPE" ENABLE;



----------------------------------------------------------------------------------------------
					-- Constract --
----------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------
					-- Constract Type --
----------------------------------------------------------------------------------------------

ALTER TABLE "APP"."type" ADD CONSTRAINT "pk_tpe" PRIMARY KEY ("tpe_id" ) using index enable;

ALTER TABLE "APP"."type" ADD CONSTRAINT "CK_TPE_01" CHECK("tpe_type" IS NOT NULL) enable;



----------------------------------------------------------------------------------------------
					-- Constract Shows --
----------------------------------------------------------------------------------------------


ALTER TABLE "APP"."shows" ADD CONSTRAINT "pk_sho" PRIMARY KEY ("sho_id") using index enable;

ALTER TABLE "APP"."shows" ADD CONSTRAINT "CK_SHO_01" CHECK("sho_title" IS NOT NULL) enable;
ALTER TABLE "APP"."shows" ADD CONSTRAINT "CK_SHO_02" CHECK("sho_date_added" IS NOT NULL) enable;
ALTER TABLE "APP"."shows" ADD CONSTRAINT "CK_SHO_03" CHECK("sho_release_year" IS NOT NULL) enable;
ALTER TABLE "APP"."shows" ADD CONSTRAINT "CK_SHO_04" CHECK("sho_duration" IS NOT NULL) enable;
ALTER TABLE "APP"."shows" ADD CONSTRAINT "CK_SHO_05" CHECK("sho_description" IS NOT NULL) enable;



----------------------------------------------------------------------------------------------
					-- Constract Rating -- 
----------------------------------------------------------------------------------------------
ALTER TABLE "APP"."rating" ADD CONSTRAINT "pk_rat" PRIMARY KEY ("rat_id" ) using index enable;

ALTER TABLE "APP"."rating" ADD CONSTRAINT "CK_RAT_01" CHECK("rat_classification" IS NOT NULL) enable;


--------------------------------------------------------------------------------------------------
						-- Constraint Listed_in --
--------------------------------------------------------------------------------------------------

ALTER TABLE "APP"."listed_in" ADD CONSTRAINT "pk_lin" PRIMARY KEY ("lin_id")  USING INDEX  ENABLE;

ALTER TABLE "APP"."listed_in" ADD CONSTRAINT "CK_LIN_01" CHECK("lin_name" IS NOT NULL) enable;


--------------------------------------------------------------------------------------------------
						-- Constraint Casting
--------------------------------------------------------------------------------------------------

ALTER TABLE "APP"."casting" ADD CONSTRAINT "pk_cas" PRIMARY KEY ("cas_id")  USING INDEX  ENABLE;


----------------------------------------------------------------------------------------------------
						-- Constraint countries
----------------------------------------------------------------------------------------------------

ALTER TABLE "APP"."countries" ADD CONSTRAINT "pk_con" PRIMARY KEY ("con_id")  USING INDEX  ENABLE;


----------------------------------------------------------------------------------------------------
						-- Constraint Directors --
----------------------------------------------------------------------------------------------------

ALTER TABLE "APP"."directors" ADD CONSTRAINT "pk_dir" PRIMARY KEY ("dir_id")  USING INDEX  ENABLE;


-----------------------------------------------------------------------------------------------------
						-- Constraint Sho_Casting--
-----------------------------------------------------------------------------------------------------


ALTER TABLE "APP"."shows_casting" ADD CONSTRAINT "pk_sca" PRIMARY KEY ("sca_cas_id",
                                                              "sca_sho_id")  USING INDEX  ENABLE;


-----------------------------------------------------------------------------------------------------
						-- sho_countries --
-----------------------------------------------------------------------------------------------------


ALTER TABLE "APP"."shows_countries" ADD CONSTRAINT "pk_sco" PRIMARY KEY ("sco_con_id",
                                                                "sco_sho_id")  USING INDEX  ENABLE;


------------------------------------------------------------------------------------------------------
						--  shows_directors --
------------------------------------------------------------------------------------------------------


ALTER TABLE "APP"."shows_directors" ADD CONSTRAINT "pk_sdi" PRIMARY KEY ("sdr_sho_id",
                                                                "sdr_dir_id" )  USING INDEX  ENABLE;

--------------------------------------------------------------------------------------------------------
						-- shows_listed_in --
--------------------------------------------------------------------------------------------------------



ALTER TABLE "APP"."shows_listed_in" ADD CONSTRAINT "pk_sli" PRIMARY KEY ("sli_lin_id",
                                                                "sli_sho_id")  USING INDEX  ENABLE;




--------------------------------------------------------------------------------------------------------------------------------------------------------------------
					-- Constraint Chave Extrangeiras --
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

ALTER TABLE "APP"."shows_casting"
    ADD CONSTRAINT "fk_sca_cas" FOREIGN KEY ("sca_cas_id")
        REFERENCES "APP"."casting"("cas_id") ENABLE;

ALTER TABLE "APP"."shows_casting"
    ADD CONSTRAINT "fk_sca_sho" FOREIGN KEY ("sca_sho_id")
        REFERENCES "APP"."shows" ("sho_id") ENABLE;

ALTER TABLE "APP"."shows_countries"
    ADD CONSTRAINT "fk_sco_con" FOREIGN KEY ("sco_con_id")
        REFERENCES "APP"."countries" ("con_id") ENABLE;

ALTER TABLE "APP"."shows_countries"
    ADD CONSTRAINT "fk_sco_sho" FOREIGN KEY ("sco_sho_id")
        REFERENCES "APP"."shows" ("sho_id") ENABLE;

ALTER TABLE "APP"."shows_directors"
    ADD CONSTRAINT fk_sdr_dir FOREIGN KEY ("sdr_dir_id")
        REFERENCES "APP"."directors" ("dir_id") ENABLE;

ALTER TABLE "APP"."shows_directors"
    ADD CONSTRAINT fk_sdr_sho FOREIGN KEY ("sdr_sho_id")
        REFERENCES "APP"."shows" ("sho_id") ENABLE;

ALTER TABLE "APP"."shows"
    ADD CONSTRAINT fk_sho_rat FOREIGN KEY ("sho_rat_id")
        REFERENCES "APP"."rating" ("rat_id") ENABLE;

ALTER TABLE "APP"."shows"
    ADD CONSTRAINT "fk_sho_tpe" FOREIGN KEY ("sho_tpe_id")
        REFERENCES "APP"."type" ("tpe_id") ENABLE;

ALTER TABLE "APP"."shows_listed_in"
    ADD CONSTRAINT "fk_sli_lin" FOREIGN KEY ("sli_lin_id")
        REFERENCES "APP"."listed_in" ("lin_id") ENABLE;

ALTER TABLE "APP"."shows_listed_in"
    ADD CONSTRAINT "fk_sli_sho" FOREIGN KEY ("sli_sho_id")
        REFERENCES "APP"."shows" ("sho_id") ENABLE;

------------------------------------------------------------------------------------------------
						Comentarios Das Colunas
------------------------------------------------------------------------------------------------

COMMENT ON COLUMN APP."casting"."cas_id" IS
    'Chave primaria de casting';

COMMENT ON COLUMN APP."casting"."cas_name" IS
    'Nome dos atores que participaram de filmes ou series';

COMMENT ON COLUMN APP."countries"."con_id" IS
    'Chave primaria da tabela countries';

COMMENT ON COLUMN APP."countries"."con_name" IS
    'Nome dos paises  em que forão filmados as series ou filmes';

COMMENT ON COLUMN APP."directors"."dir_id" IS
    'chave primaria da tabela directors';

COMMENT ON COLUMN APP."directors"."dir_name" IS
    'nome dos diretores';

COMMENT ON COLUMN APP."listed_in"."lin_id" IS
    'Chave primaria da tabela listed_in';

COMMENT ON COLUMN APP."listed_in"."lin_name" IS
    'Nome da categoria do filme ou série da tabela listed_in';

COMMENT ON COLUMN APP."rating"."rat_id" IS
    'Chave primaria da tabela directors';

COMMENT ON COLUMN APP."rating"."rat_classification" IS
    'Classificação do filme ou série, faixa de indicação';

COMMENT ON COLUMN APP."shows"."sho_id" IS
    'Chave primaria da tabela shows';

COMMENT ON COLUMN APP."shows"."sho_title" IS
    'Titulo de serie ou filmes';

COMMENT ON COLUMN APP."shows"."sho_release_year" IS
    'Ano em que foi filmado serie ou filme';

COMMENT ON COLUMN APP."shows"."sho_date_added" IS
    'Ano de lançamento da serie ou filme';

COMMENT ON COLUMN APP."shows"."sho_duration" IS
    'Duraçaõ da serie ou filme, temporadas ou horas de exibição';

COMMENT ON COLUMN APP."shows"."sho_description" IS
    'Descrição da serie ou filme';

COMMENT ON COLUMN APP."shows"."sho_tpe_id" IS
    'chave extrangeira advinda de type';

COMMENT ON COLUMN APP."shows"."sho_rat_id" IS
    'Chave extrangeira advinda de rating';

COMMENT ON COLUMN APP."shows_casting"."sca_cas_id" IS
    'chave extrangeira advinda de casting ';

COMMENT ON COLUMN APP."shows_casting"."sca_sho_id" IS
    'chave extrangeira advinda de shows ';

COMMENT ON COLUMN APP."shows_countries"."sco_con_id" IS
    'chave extrangeira advinda de countries';

COMMENT ON COLUMN APP."shows_countries"."sco_sho_id" IS
    'chave extrangeira advinda da tabela shows';

COMMENT ON COLUMN APP."shows_directors"."sdr_sho_id" IS
    'chave extrangeira advinda da tabela shows';

COMMENT ON COLUMN APP."shows_directors"."sdr_dir_id" IS
    'chave extrangeira advinda da tabela directors';

COMMENT ON COLUMN APP."shows_listed_in"."sli_lin_id" IS
    'chave extrangeira advinda de Listed_in';

COMMENT ON COLUMN APP."shows_listed_in"."sli_sho_id" IS
    'chave extrangeira advinda de shows';

COMMENT ON COLUMN APP."type"."tpe_id" IS
    'Chave primaria da tabela type';

COMMENT ON COLUMN APP."type"."tpe_type" IS
    'Coluna que demonstra se é um filme ou série da tabela type';

----------------------------------------------------------------------------------------------------------------------------------------------------------

										Comentarios das Tabela 
----------------------------------------------------------------------------------------------------------------------------------------------------------


-- Tabela que relaciona atores e atrizes com os shows em que eles aparecem.
COMMENT ON TABLE "casting" IS 'Tabela que relaciona atores e atrizes com os shows em que eles aparecem';

-- Tabela que armazena informações sobre os países onde os shows são produzidos ou exibidos.
COMMENT ON TABLE "countries" IS 'Tabela que armazena informações sobre os países onde os shows são produzidos';

-- Tabela que armazena informações sobre os diretores dos shows.
COMMENT ON TABLE "directors" IS 'Tabela que armazena informações sobre os diretores dos shows';

-- Tabela que armazena informações sobre as categorias em que os shows são classificados (por exemplo, drama, comédia, suspense).
COMMENT ON TABLE "listed_in" IS 'Tabela que armazena informações sobre as categorias em que os shows são classificados (por exemplo, drama, comédia, suspense)';

-- Tabela que armazena informações sobre a classificação dos shows (por exemplo, PG-13, R, TV-MA).
COMMENT ON TABLE "rating" IS 'Tabela que armazena informações sobre a classificação dos shows (por exemplo, PG-13, R, TV-MA)';

-- Tabela que armazena informações gerais sobre os shows (filmes e séries).
COMMENT ON TABLE "shows" IS 'Tabela que armazena informações gerais sobre os shows (filmes e séries)';

-- Tabela de relacionamento que liga shows a seus atores e atrizes.
COMMENT ON TABLE "shows_casting" IS 'Tabela de relacionamento que liga shows a seus atores e atrizes';

-- Tabela de relacionamento que liga shows aos países em que são produzidos ou exibidos.
COMMENT ON TABLE "shows_countries" IS 'Tabela de relacionamento que liga shows aos países em que são produzidos';

-- Tabela de relacionamento que liga shows aos seus diretores.
COMMENT ON TABLE "shows_directors" IS 'Tabela de relacionamento que liga shows aos seus diretores';

-- Tabela de relacionamento que liga shows às suas categorias.
COMMENT ON TABLE "shows_listed_in" IS 'Tabela de relacionamento que liga shows às suas categorias';

-- Tabela que armazena informações sobre o tipo de show (por exemplo, filme ou série de TV).
COMMENT ON TABLE "type" IS 'Tabela que armazena informações sobre o tipo de show (por exemplo, filme ou série de TV)';


--------------------------------------------------------------------------------------------------------------
						--PROCEDURES INSERÇÃO DE DADOS
--------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------
-- INSERIR CASTING --
-----------------------------------------------------------------------------

set define off;
create or replace PROCEDURE INSERIR_CASTING
(
    p_cas_name "casting"."cas_name"%type
) 

IS
    v_id integer;
    v_count integer;

BEGIN

SELECT count(*) into v_count from "casting" where "cas_name" = p_cas_name;
if v_count = 0 then

    INSERT INTO "casting"
    VALUES
    (0, p_cas_name);
    
end if;

SELECT "cas_id" into v_id from "casting" WHERE "casting"."cas_name" = p_cas_name;
UPDATE metflix set cast = v_id where cast = p_cas_name;

COMMIT;
END INSERIR_CASTING;

/



----------------------------------------------------------------------
-- INSERIR COUNTRIES --
----------------------------------------------------------------------

set define off;
create or replace PROCEDURE INSERIR_COUNTRIES
(
p_con_name "countries"."con_name"%type
)

IS

    v_id integer;
    v_count integer;

BEGIN

SELECT count(*) into v_count from "countries" where "con_name" = p_con_name;
if v_count = 0 then 

    INSERT INTO "countries"
    VALUES
    (0, p_con_name);

end if;

SELECT "con_id" into v_id from "countries" where "countries"."con_name" = p_con_name;
UPDATE metflix set country = v_id where country = p_con_name;

COMMIT;
END INSERIR_COUNTRIES;

/



----------------------------------------------------------------------------
-- INSERIR DIRECTORS --
----------------------------------------------------------------------------

set define off;

create or replace PROCEDURE INSERIR_DIRECTORS
(
p_dir_name "directors"."dir_name"%type
)

IS

    v_id integer;
    v_count integer;

BEGIN

SELECT count(*) into v_count from "directors" where "dir_name" = p_dir_name;
if v_count = 0 then 

    INSERT INTO "directors"
    VALUES
    (0, p_dir_name);

end if;

SELECT "dir_id" into v_id from "directors" where "directors"."dir_name" = p_dir_name;
UPDATE metflix set metflix.director = v_id where metflix.director = p_dir_name;

COMMIT;
END INSERIR_DIRECTORS;

/


---------------------------------------------------------------------------
-- INSERIR LISTED --
---------------------------------------------------------------------------

set define off;

create or replace PROCEDURE INSERIR_LISTED
(
p_lin_name "listed_in"."lin_name"%type
)

IS
    
    v_id integer;
    v_count integer;

BEGIN

select count(*) into v_count from "listed_in" where "lin_name" = p_lin_name;
if v_count = 0 then

    INSERT INTO "listed_in"
    VALUES
    (0, p_lin_name);
end if;

    SELECT "lin_id" into v_id from "listed_in" where "listed_in"."lin_name" = p_lin_name;
    UPDATE metflix SET listed_in = v_id WHERE listed_in = p_lin_name;

COMMIT;
END INSERIR_LISTED;

/



---------------------------------------------------------------------------
-- INSERIR RATING --
---------------------------------------------------------------------------

set define off;

create or replace PROCEDURE INSERIR_RATING
(
p_rat_classification "rating"."rat_classification"%type
)

IS
BEGIN
    INSERT INTO "rating"
    VALUES
    (0,p_rat_classification);

COMMIT;
END INSERIR_RATING;

/


-----------------------------------------------------------------------------
-- INSERIR SHOWS --
-----------------------------------------------------------------------------

set define off;

create or replace PROCEDURE INSERIR_SHOWS
(
p_sho_title "shows"."sho_title"%type,
p_sho_release_year "shows"."sho_release_year"%type,
p_sho_date_added "shows"."sho_date_added"%type,
p_sho_duration "shows"."sho_duration"%type,
p_sho_description "shows"."sho_description"%type,
p_sho_type "shows"."sho_tpe_id"%type,
p_sho_rating "shows"."sho_rat_id"%type
)

IS

    v_id integer;
    v_count integer;


BEGIN

select count(*) into v_count from "shows" where "sho_title" = p_sho_title;

if v_count = 0 then

    INSERT INTO "shows"
    VALUES
    (0,p_sho_title, p_sho_release_year,p_sho_date_added,p_sho_duration, p_sho_description,p_sho_type,p_sho_rating);

end if;

    SELECT "sho_id" into v_id from "shows" where "shows"."sho_title" = p_sho_title;
    UPDATE metflix set title = v_id where title = p_sho_title;

COMMIT;
END INSERIR_SHOWS;

/



-----------------------------------------------------------------------------------
-- INSERIR SHOWS_CASTING --
-----------------------------------------------------------------------------------

set define off;

create or replace PROCEDURE INSERIR_SHOWS_CASTING (

  p_sca_cas_id "shows_casting"."sca_cas_id"%TYPE,
  p_sca_sho_id "shows_casting"."sca_sho_id"%TYPE
  
)
IS
  
BEGIN
   
    INSERT INTO "shows_casting"
    VALUES (p_sca_cas_id, p_sca_sho_id);
    COMMIT;
END INSERIR_SHOWS_CASTING;

/


----------------------------------------------------------------
-- INSERIR SHOWS_COUTRIES --
----------------------------------------------------------------
set define off;

create or replace PROCEDURE INSERIR_SHOWS_COUNTRIES (

  p_sco_con_id "shows_countries"."sco_con_id"%TYPE,
  p_sco_sho_id "shows_countries"."sco_sho_id"%TYPE
  
)
IS
  
BEGIN

    INSERT INTO "shows_countries"
    VALUES (p_sco_con_id, p_sco_sho_id);
    COMMIT;
END INSERIR_SHOWS_COUNTRIES ;

/


----------------------------------------------------------------------------
-- INSERIR SHOWS_DIRECTORS
----------------------------------------------------------------------------

set define off;
create or replace PROCEDURE INSERIR_SHOWS_DIRECTORS (

  p_sdr_sho_id "shows_directors"."sdr_sho_id"%TYPE,
  p_sdr_dir_id "shows_directors"."sdr_dir_id"%TYPE
  
)
IS
  
BEGIN

    INSERT INTO "shows_directors"
    VALUES (p_sdr_sho_id, p_sdr_dir_id);
    COMMIT;
END INSERIR_SHOWS_DIRECTORS ;
/



-- INSERIR SHOWS_LISTED_IN

create or replace PROCEDURE INSERIR_SHOWS_LISTED (

  p_sli_lin_id "shows_listed_in"."sli_lin_id"%TYPE,
  p_sli_sho_id "shows_listed_in"."sli_sho_id"%TYPE
  
)
IS
  
BEGIN

    INSERT INTO "shows_listed_in"
    VALUES (p_sli_lin_id,p_sli_sho_id);
    COMMIT;
END  INSERIR_SHOWS_DIRECTORS;

/



-------------------------------------------------------------------


--------------------------------------------------------------------
-- INSERIR TYPES --
--------------------------------------------------------------------

set define off;
create or replace PROCEDURE INSERIR_TYPES
(
p_tpe_type "type"."tpe_type"%type
)

IS
BEGIN
    INSERT INTO "type"
    VALUES
    (0,p_tpe_type);
COMMIT;
END INSERIR_TYPES;

/



-----------------------------------------------------------------------------------------------
					-- PL SQL (CHAMADA DAS PROCEDURES) -- 
-----------------------------------------------------------------------------------------------

-- CASTING
DECLARE
    CURSOR cur_CASTING IS SELECT CAST FROM  METFLIX;
BEGIN
    FOR linha_cur_CASTING IN cur_CASTING LOOP
        INSERIR_CASTING(linha_cur_CASTING.CAST);
    END LOOP;
END;


--TYPE
DECLARE 
    CURSOR cur_Types IS SELECT DISTINCT TYPE FROM METFLIX;
BEGIN
    FOR linha_cur_types IN cur_Types LOOP
        INSERIR_TYPES(linha_cur_types.TYPE);
    END LOOP;
END;



--RATING
DECLARE
    CURSOR cur_RATINGS IS SELECT DISTINCT RATING FROM METFLIX;
BEGIN
    FOR linha_cur_ratings IN cur_RATINGS LOOP
        INSERIR_RATING(linha_cur_ratings.RATING);
    END LOOP;
END;



--LISTED-IN
DECLARE
    CURSOR cur_LISTEDS IS SELECT LISTED_IN FROM METFLIX;
BEGIN
    FOR linha_cur_LISTEDS IN cur_LISTEDS LOOP
        INSERIR_LISTED(linha_cur_LISTEDS.LISTED_IN);
    END LOOP;
END;



--DIRECTORS
DECLARE
    CURSOR cur_DIRECTORS IS SELECT DIRECTOR FROM METFLIX;
BEGIN
    FOR linha_cur_DIRECTORS IN cur_DIRECTORS LOOP
        INSERIR_DIRECTORS(linha_cur_DIRECTORS.DIRECTOR);
    END LOOP;
END;


-- COUNTRIES
DECLARE
    CURSOR cur_COUNTRIES IS SELECT COUNTRY FROM METFLIX;
BEGIN
    FOR linha_cur_COUNTRIES IN cur_COUNTRIES LOOP
        INSERIR_COUNTRIES(linha_cur_COUNTRIES.COUNTRY);
    END LOOP;
END;


-- SHOWS
DECLARE
    CURSOR cur_SHOWS IS SELECT TITLE, RELEASE_YEAR, DATE_ADDED, DURATION, DESCRIPTION, TYPE, RATING FROM METFLIX;
BEGIN
    FOR linha_cur_shows IN cur_SHOWS LOOP
        INSERIR_SHOWS(linha_cur_shows.TITLE, linha_cur_shows.RELEASE_YEAR,
                      linha_cur_shows.DATE_ADDED, linha_cur_shows.DURATION,
                      linha_cur_shows.DESCRIPTION,
                      linha_cur_shows.TYPE,
                      linha_cur_shows.RATING);
    END LOOP;
END;


-- SHOWS_CASTING
DECLARE
    CURSOR cur_SHOWS_CASTING IS SELECT CAST, TITLE FROM METFLIX;
BEGIN
    FOR linha_cur IN cur_SHOWS_CASTING LOOP
        INSERIR_SHOWS_CASTING(linha_cur.CAST, linha_cur.TITLE);
    END LOOP;
END;

-- SHOWS_COUNTRIES
DECLARE
    CURSOR cur_SHOWS_COUTRIES IS SELECT TITLE, COUNTRY FROM METFLIX;
BEGIN
    FOR linha_cur IN cur_SHOWS_COUTRIES LOOP
        INSERIR_SHOWS_COUNTRIES(linha_cur.COUNTRY, linha_cur.TITLE);
    END LOOP;
END;


--SHOWS_DIRECTORS
DECLARE 
    CURSOR cur_SHOWS_DIRECTORS IS SELECT TITLE, DIRECTOR FROM METFLIX;
BEGIN
    FOR linha_cur IN cur_SHOWS_DIRECTORS LOOP
        INSERIR_SHOWS_DIRECTORS(linha_cur.TITLE, linha_cur.DIRECTOR);
    END LOOP;
END;


--SHOWS_LISTED_IN
DECLARE
    CURSOR cur_SHOWS_LISTED IS SELECT title, listed_in FROM METFLIX;
BEGIN
    FOR linha_cur IN cur_SHOWS_LISTED LOOP
        INSERIR_SHOWS_LISTED(linha_cur.listed_in, linha_cur.title);
    END LOOP;
END;
   
-------------------------------------------------------------------------------------------------------------------------

					--Procedure Para A Chamada De Todas As Procedures 
-------------------------------------------------------------------------------------------------------------------------


CREATE OR REPLACE PROCEDURE INSERT_METFLIX_DATA AS
BEGIN
  -- CASTING
  FOR linha_cur_CASTING IN (SELECT CAST FROM METFLIX) LOOP
    INSERIR_CASTING(linha_cur_CASTING.CAST);
  END LOOP;
  
  -- TYPE
  FOR linha_cur_types IN (SELECT DISTINCT TYPE FROM METFLIX) LOOP
    INSERIR_TYPES(linha_cur_types.TYPE);
  END LOOP;

  -- RATING
  FOR linha_cur_ratings IN (SELECT DISTINCT RATING FROM METFLIX) LOOP
    INSERIR_RATING(linha_cur_ratings.RATING);
  END LOOP;

  -- LISTED-IN
  FOR linha_cur_LISTEDS IN (SELECT LISTED_IN FROM METFLIX) LOOP
    INSERIR_LISTED(linha_cur_LISTEDS.LISTED_IN);
  END LOOP;

  -- DIRECTORS
  FOR linha_cur_DIRECTORS IN (SELECT DIRECTOR FROM METFLIX) LOOP
    INSERIR_DIRECTOR(linha_cur_DIRECTORS.DIRECTOR);
  END LOOP;

  -- COUNTRIES
  FOR linha_cur_COUNTRIES IN (SELECT COUNTRY FROM METFLIX) LOOP
    INSERIR_COUNTRIES(linha_cur_COUNTRIES.COUNTRY);
  END LOOP;

  -- SHOWS
  FOR linha_cur_shows IN (SELECT TITLE, RELEASE_YEAR, DATE_ADDED, DURATION, DESCRIPTION, TYPE, RATING FROM METFLIX) LOOP
    INSERIR_SHOWS(linha_cur_shows.TITLE, linha_cur_shows.RELEASE_YEAR,
                  linha_cur_shows.DATE_ADDED, linha_cur_shows.DURATION,
                  linha_cur_shows.DESCRIPTION,
                  linha_cur_shows.TYPE,
                  linha_cur_shows.RATING);
  END LOOP;

  -- Update na TABELA METFLIX, ALTERANDO A COLUNA TYPE.
  -- NESSA ATUALIZAÇÃO O VALOR DA COLUNA É SUBSTITUIDO PELO SEU ID NA TABELA TYPE, COLUNA TPE_ID
  UPDATE metflix
  SET TYPE = (SELECT "tpe_id" FROM "type" WHERE metflix.TYPE = "type"."tpe_type");

  -- UPDATE NA TABELA METFLIX, ALTERANDO A COLUNA RATING.
  -- NESSA ATUALIZAÇÃO O VALOR DA COLUNA É SUBSTITUIDO PELO SEU ID NA TABELA RATING, COLUNA RAT_ID
  UPDATE metflix
  SET RATING = (SELECT "rat_id" FROM "rating" WHERE metflix.RATING = "rating"."rat_classification");

  -- SHOWS_CASTING
  FOR linha_cur IN (SELECT CAST, TITLE FROM METFLIX) LOOP
    INSERIR_SHOWS_CASTING(linha_cur.CAST, linha_cur.TITLE);
  END LOOP;

  -- SHOWS_COUNTRIES
  FOR linha_cur IN (SELECT TITLE, COUNTRY FROM METFLIX) LOOP
    INSERIR_SHOWS_COUNTRIES(linha_cur.TITLE, linha_cur.COUNTRY);
  END LOOP;

  -- SHOWS_DIRECTORS
  FOR linha_cur IN (SELECT TITLE, DIRECTOR FROM METFLIX) LOOP
    INSERIR_SHOWS_DIRECTORS(linha_cur.TITLE, linha_cur.DIRECTOR);
  END LOOP;

  -- SHOWS_LISTED_IN
  FOR linha_cur IN (SELECT TITLE, LISTED_IN FROM METFLIX) LOOP
    INSERIR_SHOWS_LISTED(linha_cur.LISTED_IN, linha_cur.TITLE);
  END LOOP;
END;
/




------------------------------------------------------------------------------------------------------------------------
					--HISTORIAMENTO E TRIGGER PARA UPDATE E DELETE
-------------------------------------------------------------------------------------------------------------------------




CREATE TABLE h_casting (
    hcas_id          INTEGER NOT NULL,
    HCAS_NAME     VARCHAR2(600),
    HCAS_DT_HIST DATE NOT NULL
);


ALTER TABLE h_casting ADD CONSTRAINT hcasting_pk PRIMARY KEY ( hcas_id,
                                                               HCAS_DT_HIST);

CREATE TABLE h_countries (
    hcon_id      INTEGER NOT NULL,
    hcon_name    VARCHAR2(600),
    hcon_dt_hist DATE NOT NULL
);

ALTER TABLE h_countries ADD CONSTRAINT hcountries_pk PRIMARY KEY ( hcon_id,
                                                                   hcon_dt_hist );

CREATE TABLE h_directors (
    hdir_id      INTEGER NOT NULL,
    hdir_name    VARCHAR2(600),
    hdir_dt_hist DATE NOT NULL
);


ALTER TABLE h_directors ADD CONSTRAINT hdirectors_pk PRIMARY KEY ( hdir_id,
                                                                   hdir_dt_hist );

CREATE TABLE h_listed_in (
    hlin_id      INTEGER NOT NULL,
    hlin_name    VARCHAR2(600),
    hlin_dt_hist DATE NOT NULL
);

ALTER TABLE h_listed_in ADD CONSTRAINT hlisted_in_pk PRIMARY KEY ( hlin_id,
                                                                   hlin_dt_hist );

CREATE TABLE h_rating (
    HRAT_ID         INTEGER NOT NULL,
    hrat_classification VARCHAR2(60),
    HRAT_DT_HIST     DATE NOT NULL
);


ALTER TABLE h_rating ADD CONSTRAINT hrating_pk PRIMARY KEY ( HRAT_ID,
                                                             HRAT_DT_HIST);

CREATE TABLE h_shows (
    hsho_id           INTEGER NOT NULL,
    hsho_title        VARCHAR2(600),
    hsho_release_year INTEGER,
    hsho_date_added   VARCHAR2(600),
    hsho_duration     VARCHAR2(600),
    hsho_description  CLOB,
    HSHO_TPE_ID   INTEGER NOT NULL,
    hsho_rat_id       INTEGER NOT NULL,
    HSHO_DT_HIST  DATE NOT NULL
);


ALTER TABLE h_shows ADD CONSTRAINT hshows_pk PRIMARY KEY ( hsho_id,
                                                           HSHO_DT_HIST);

CREATE TABLE h_type (
    HTPE_ID       INTEGER NOT NULL,
    HTPE_TYPE     VARCHAR2(10),
    HTPE_DT_HIST  DATE NOT NULL
);

ALTER TABLE h_type ADD CONSTRAINT htype_pk PRIMARY KEY (HTPE_ID,
                                                        HTPE_DT_HIST);





-----------------------------------------------------------------------------------------------------------------------
							--TRIGGER HISTORIAMENTO
-----------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------
			--TRIGGER HISTORIAMENTO CASTING
-------------------------------------------------------------------------

CREATE TRIGGER "TG_H_CAS"
AFTER UPDATE OR DELETE ON "casting"
FOR EACH ROW
BEGIN
    INSERT INTO H_CASTING VALUES(:old."cas_id", :old."cas_name", sysdate);
END;
 
/
ALTER TRIGGER "TG_H_CAS" ENABLE;

------------------------------------------------------------------------
			--TRIGGER HISTORIAMENTO COUNTRIES
------------------------------------------------------------------------

CREATE TRIGGER "TG_H_CON"
AFTER UPDATE OR DELETE ON "countries"
FOR EACH ROW
BEGIN
    INSERT INTO H_COUNTRIES VALUES(:old."con_id", :old."con_name", sysdate);
END;
/
ALTER TRIGGER "TG_H_CON" ENABLE;


---------------------------------------------------------------------------
			--TRIGGER HISTORIAMENTO DIRECTORS
---------------------------------------------------------------------------


CREATE TRIGGER "TG_H_DIR"
AFTER UPDATE OR DELETE ON "directors"
FOR EACH ROW
BEGIN
    INSERT INTO H_DIRECTORS VALUES(:old."dir_id", :old."dir_name", sysdate);
END;
/
ALTER TRIGGER "TG_H_DIR" ENABLE;


-------------------------------------------------------------------------
			--TRIGGER HISTORIAMENTO LISTED_IN
-------------------------------------------------------------------------


CREATE TRIGGER "TG_H_LIN"
AFTER UPDATE OR DELETE ON "listed_in"
FOR EACH ROW
BEGIN
    INSERT INTO H_LISTED_IN VALUES(:old."lin_id", :old."lin_name", sysdate);
END;
/
ALTER TRIGGER "TG_H_DIR" ENABLE;


--------------------------------------------------------------------------
			--TRIGGER HISTORIAMENTO RATING
--------------------------------------------------------------------------


CREATE TRIGGER "TG_H_RAT"
AFTER UPDATE OR DELETE ON "rating"
FOR EACH ROW
BEGIN
    INSERT INTO H_RATING VALUES(:old."rat_id", :old."rat_classification", sysdate);
END;
/
ALTER TRIGGER "TG_H_RAT" ENABLE;


-------------------------------------------------------------------------------
			--TRIGGER HISTORIAMENTO SHOWS
-------------------------------------------------------------------------------


CREATE TRIGGER "TG_H_SHO"
AFTER UPDATE OR DELETE ON "shows"
FOR EACH ROW
BEGIN
    INSERT INTO H_SHOWS VALUES(:old."sho_id", :old."sho_title", :old."sho_release_year", :old."sho_date_added",
                                :old."sho_duration", :old."sho_description", :old."sho_tpe_id", :old."sho_rat_id", sysdate);
END;
/
ALTER TRIGGER "TG_H_SHO" ENABLE;

--

CREATE TRIGGER "TG_H_TPE"
AFTER UPDATE OR DELETE ON "type"
FOR EACH ROW
BEGIN
    INSERT INTO H_TYPE VALUES(:old."tpe_id", :old."tpe_type", sysdate);
END;
/
ALTER TRIGGER "TG_H_TPE" ENABLE;






----------------------------------------------------------------------------------------------------------------------------------

								-- AUDITORIA 

----------------------------------------------------------------------------------------------------------------------------------



REM INSERTING into HCASTING
SET DEFINE OFF;
REM INSERTING into CASTING
SET DEFINE OFF;

REM INSERTING into H_COUNTRIES
SET DEFINE OFF;
REM INSERTING into COUNTRIES
SET DEFINE OFF;

REM INSERTING into H_DIRECTORS
SET DEFINE OFF;
REM INSERTING into DIRECTORS
SET DEFINE OFF;

REM INSERTING into H_LISTED_IN
SET DEFINE OFF;
REM INSERTING into LISTED_IN
SET DEFINE OFF;


REM INSERTING into H_RATING
SET DEFINE OFF;
REM INSERTING into RATING
SET DEFINE OFF;


REM INSERTING into H_SHOWS
SET DEFINE OFF;
REM INSERTING into SHOWS
SET DEFINE OFF;


REM INSERTING into H_TYPE
SET DEFINE OFF;
REM INSERTING into TYPE
SET DEFINE OFF;


--------------------------------------------------------
--  DDL for Trigger TG_AUD_CASTING
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "TG_AUD_CASTING" 
AFTER UPDATE OR DELETE ON H_CASTING
FOR EACH ROW
DECLARE
    V_USU_BD VARCHAR(30);
    V_USU_SO VARCHAR(255) := SYS_CONTEXT('USERENV','OS_USER');
    V_TP_OPERACAO CHAR(1);
    V_ROWID VARCHAR(20);
    V_TABELA VARCHAR(30) := 'H_CASTING';
BEGIN
    SELECT USER INTO V_USU_BD FROM DUAL;
    V_ROWID := :OLD.ROWID;
    IF DELETING THEN
        V_TP_OPERACAO := 'D';
        AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,NULL,NULL,NULL,V_USU_BD,V_USU_SO,SYSDATE);
    ELSE

        V_TP_OPERACAO := 'U';
        IF (:NEW.HCAS_ID <> :OLD.HCAS_ID) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HCAS_ID',:OLD.HCAS_ID,:NEW.HCAS_ID,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;

        IF (:NEW.HCAS_NAME <> :OLD.HCAS_NAME) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HCAS_NAME',:OLD.HCAS_NAME,:NEW.HCAS_NAME,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;

        IF (:NEW.HCAS_DT_HIST <> :OLD.HCAS_DT_HIST) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HCAS_DT_HIST',:OLD.HCAS_DT_HIST,:NEW.HCAS_DT_HIST,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;
    END IF;
END;
/
ALTER TRIGGER "TG_AUD_CASTING" ENABLE;





----------------------------------------------------------------------------------------------------
-- DDL AUDITORIA COUNTRIES

----------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------
--  DDL for Trigger TG_AUD_COUNTRIES
---------------------------------------------------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "TG_AUD_COUNTRIES" 
AFTER UPDATE OR DELETE ON H_COUNTRIES
FOR EACH ROW
DECLARE
    V_USU_BD VARCHAR(30);
    V_USU_SO VARCHAR(255) := SYS_CONTEXT('USERENV','OS_USER');
    V_TP_OPERACAO CHAR(1);
    V_ROWID VARCHAR(20);
    V_TABELA VARCHAR(30) := 'H_COUNTRIES';
BEGIN
    SELECT USER INTO V_USU_BD FROM DUAL;
    V_ROWID := :OLD.ROWID;
    IF DELETING THEN
        V_TP_OPERACAO := 'D';
        AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,NULL,NULL,NULL,V_USU_BD,V_USU_SO,SYSDATE);
    ELSE

        V_TP_OPERACAO := 'U';
        IF (:NEW.HCON_ID <> :OLD.HCON_ID) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HCON_ID',:OLD.HCON_ID,:NEW.HCON_ID,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;

        IF (:NEW.HCON_NAME <> :OLD.HCON_NAME) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HCON_NAME',:OLD.HCON_NAME,:NEW.HCON_NAME,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;

        IF (:NEW.HCON_DT_HIST <> :OLD.HCON_DT_HIST) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HCON_DT_HIST',:OLD.HCON_DT_HIST,:NEW.HCON_DT_HIST,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;
    END IF;
END;
/
ALTER TRIGGER "TG_AUD_COUNTRIES" ENABLE;




-------------------------------------------------------------------------------
-- DDL for Trigger TG_AUD_DIRECTORS
-------------------------------------------------------------------------------


CREATE OR REPLACE NONEDITIONABLE TRIGGER "TG_AUD_DIRECTORS" 
AFTER UPDATE OR DELETE ON H_DIRECTORS
FOR EACH ROW
DECLARE
    V_USU_BD VARCHAR(30);
    V_USU_SO VARCHAR(255) := SYS_CONTEXT('USERENV','OS_USER');
    V_TP_OPERACAO CHAR(1);
    V_ROWID VARCHAR(20);
    V_TABELA VARCHAR(30) := 'H_DIRECTORS';
BEGIN
    SELECT USER INTO V_USU_BD FROM DUAL;
    V_ROWID := :OLD.ROWID;
    IF DELETING THEN
        V_TP_OPERACAO := 'D';
        AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,NULL,NULL,NULL,V_USU_BD,V_USU_SO,SYSDATE);
    ELSE

        V_TP_OPERACAO := 'U';
        IF (:NEW.HDIR_ID <> :OLD.HDIR_ID) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HDIR_ID',:OLD.HDIR_ID,:NEW.HDIR_ID,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;

        IF (:NEW.HDIR_NAME <> :OLD.HDIR_NAME) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HDIR_NAME',:OLD.HDIR_NAME,:NEW.HDIR_NAME,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;

        IF (:NEW.HDIR_DT_HIST <> :OLD.HDIR_DT_HIST) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HDIR_DT_HIST',:OLD.HDIR_DT_HIST,:NEW.HDIR_DT_HIST,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;
    END IF;
END;
/
ALTER TRIGGER "TG_AUD_DIRECTORS" ENABLE;





-----------------------------------------------------------------------
--TRIGGER AUDITORIA LISTED-IN --
-----------------------------------------------------------------------


CREATE OR REPLACE NONEDITIONABLE TRIGGER "TG_AUD_LISTED_IN" 
AFTER UPDATE OR DELETE ON H_LISTED_IN
FOR EACH ROW
DECLARE
    V_USU_BD VARCHAR(30);
    V_USU_SO VARCHAR(255) := SYS_CONTEXT('USERENV','OS_USER');
    V_TP_OPERACAO CHAR(1);
    V_ROWID VARCHAR(20);
    V_TABELA VARCHAR(30) := 'H_LISTED_IN';
BEGIN
    SELECT USER INTO V_USU_BD FROM DUAL;
    V_ROWID := :OLD.ROWID;
    IF DELETING THEN
        V_TP_OPERACAO := 'D';
        AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,NULL,NULL,NULL,V_USU_BD,V_USU_SO,SYSDATE);
    ELSE

        V_TP_OPERACAO := 'U';
        IF (:NEW.HLIN_ID <> :OLD.HLIN_ID) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HLIN_ID',:OLD.HLIN_ID,:NEW.HLIN_ID,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;

        IF (:NEW.HLIN_NAME <> :OLD.HLIN_NAME) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HLIN_NAME',:OLD.HLIN_NAME,:NEW.HLIN_NAME,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;

        IF (:NEW.HLIN_DT_HIST <> :OLD.HLIN_DT_HIST) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HLIN_DT_HIST',:OLD.HLIN_DT_HIST,:NEW.HLIN_DT_HIST,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;
       
    END IF;
END;
/
ALTER TRIGGER "TG_AUD_LISTED_IN" ENABLE;




-----------------------------------------------------------------
-- TRIGER AUDITORIA RATING
-----------------------------------------------------------------


CREATE OR REPLACE NONEDITIONABLE TRIGGER "TG_AUD_RATING" 
AFTER UPDATE OR DELETE ON H_RATING
FOR EACH ROW
DECLARE
    V_USU_BD VARCHAR(30);
    V_USU_SO VARCHAR(255) := SYS_CONTEXT('USERENV','OS_USER');
    V_TP_OPERACAO CHAR(1);
    V_ROWID VARCHAR(20);
    V_TABELA VARCHAR(30) := 'H_RATING';
BEGIN
    SELECT USER INTO V_USU_BD FROM DUAL;
    V_ROWID := :OLD.ROWID;
    IF DELETING THEN
        V_TP_OPERACAO := 'D';
        AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,NULL,NULL,NULL,V_USU_BD,V_USU_SO,SYSDATE);
    ELSE

        V_TP_OPERACAO := 'U';
        IF (:NEW.HRAT_ID <> :OLD.HRAT_ID) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HRAT_ID',:OLD.HRAT_ID,:NEW.HRAT_ID,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;

        IF (:NEW.HRAT_CLASSIFICATION <> :OLD.HRAT_CLASSIFICATION) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HRAT_CLASSIFICATION',:OLD.HRAT_CLASSIFICATION,:NEW.HRAT_CLASSIFICATION,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;

        IF (:NEW.HRAT_DT_HIST <> :OLD.HRAT_DT_HIST) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HRAT_DT_HIST',:OLD.HRAT_DT_HIST,:NEW.HRAT_DT_HIST,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;
       
    END IF;
END;
/
ALTER TRIGGER "TG_AUD_RATING" ENABLE;





------------------------------------------------------------------------------
-- TRIGGER AUDITORIA SHOWS
------------------------------------------------------------------------------


CREATE OR REPLACE NONEDITIONABLE TRIGGER "TG_AUD_SHOWS" 
AFTER UPDATE OR DELETE ON H_SHOWS
FOR EACH ROW
DECLARE
    V_USU_BD VARCHAR(30);
    V_USU_SO VARCHAR(255) := SYS_CONTEXT('USERENV','OS_USER');
    V_TP_OPERACAO CHAR(1);
    V_ROWID VARCHAR(20);
    V_TABELA VARCHAR(30) := 'H_SHOWS';
BEGIN
    SELECT USER INTO V_USU_BD FROM DUAL;
    V_ROWID := :OLD.ROWID;
    IF DELETING THEN
        V_TP_OPERACAO := 'D';
        AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,NULL,NULL,NULL,V_USU_BD,V_USU_SO,SYSDATE);
    ELSE

        V_TP_OPERACAO := 'U';
        IF (:NEW.HSHO_ID <> :OLD.HSHO_ID) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HSHO_ID',:OLD.HSHO_ID,:NEW.HSHO_ID,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;

        IF (:NEW.HSHO_TITLE <> :OLD.HSHO_TITLE) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HSHO_TITLE',:OLD.HSHO_TITLE,:NEW.HSHO_TITLE,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;

        IF (:NEW.HSHO_RELEASE_YEAR <> :OLD.HSHO_RELEASE_YEAR) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HSHO_RELEASE_YEAR',:OLD.HSHO_RELEASE_YEAR,:NEW.HSHO_RELEASE_YEAR,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;


        IF (:NEW.HSHO_DATE_ADDED <> :OLD.HSHO_DATE_ADDED) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HSHO_DATE_ADDED',:OLD.HSHO_DATE_ADDED,:NEW.HSHO_DATE_ADDED,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;


        IF (:NEW.HSHO_DURATION <> :OLD.HSHO_DURATION) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HSHO_DURATION',:OLD.HSHO_DURATION,:NEW.HSHO_DURATION,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;

        IF (:NEW.HSHO_DESCRIPTION <> :OLD.HSHO_DESCRIPTION) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HSHO_DESCRIPTION',:OLD.HSHO_DESCRIPTION,:NEW.HSHO_DESCRIPTION,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;

        IF (:NEW.HSHO_TPE_ID <> :OLD.HSHO_TPE_ID) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HSHO_TPE_ID',:OLD.HSHO_TPE_ID,:NEW.HSHO_TPE_ID,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;

        IF (:NEW.HSHO_RAT_ID <> :OLD.HSHO_RAT_ID) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HSHO_RAT_ID',:OLD.HSHO_RAT_ID,:NEW.HSHO_RAT_ID,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;


         IF (:NEW.HSHO_DT_HIST <> :OLD.HSHO_DT_HIST) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HSHO_DT_HIST',:OLD.HSHO_DT_HIST,:NEW.HSHO_DT_HIST,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;

    END IF;
END;
/
ALTER TRIGGER "TG_AUD_SHOWS" ENABLE;




-----------------------------------------------------------------
-- TRIGER AUDITORIA TYPE
-----------------------------------------------------------------

CREATE OR REPLACE NONEDITIONABLE TRIGGER "TG_AUD_TYPE" 
AFTER UPDATE OR DELETE ON H_TYPE
FOR EACH ROW
DECLARE
    V_USU_BD VARCHAR(30);
    V_USU_SO VARCHAR(255) := SYS_CONTEXT('USERENV','OS_USER');
    V_TP_OPERACAO CHAR(1);
    V_ROWID VARCHAR(20);
    V_TABELA VARCHAR(30) := 'H_TYPE';
BEGIN
    SELECT USER INTO V_USU_BD FROM DUAL;
    V_ROWID := :OLD.ROWID;
    IF DELETING THEN
        V_TP_OPERACAO := 'D';
        AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,NULL,NULL,NULL,V_USU_BD,V_USU_SO,SYSDATE);
    ELSE

        V_TP_OPERACAO := 'U';
        IF (:NEW.HTPE_ID <> :OLD.HTPE_ID) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HTPE_ID',:OLD.HTPE_ID,:NEW.HTPE_ID,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;

        IF (:NEW.HTPE_TYPE <> :OLD.HTPE_TYPE) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HTPE_TYPE',:OLD.HTPE_TYPE,:NEW.HTPE_TYPE,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;

        IF (:NEW.HTPE_DT_HIST <> :OLD.HTPE_DT_HIST) THEN
            AUDITORIA.PROC_AUDITORIA(V_TABELA,V_ROWID,V_TP_OPERACAO,'HTPE_DT_HIST',:OLD.HTPE_DT_HIST,:NEW.HTPE_DT_HIST,V_USU_BD,V_USU_SO,SYSDATE);
        END IF;
    END IF;
END;
/
ALTER TRIGGER "TG_AUD_TYPE" ENABLE;





















